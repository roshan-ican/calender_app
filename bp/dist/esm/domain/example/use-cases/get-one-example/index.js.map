{"version":3,"sources":["../../../../../../src/data-access/models/example.model.ts","../../../../../../src/data-access/example.repo.ts","../../../../../../src/domain/example/use-cases/get-one-example/getone-example.usecase.ts","../../../../../../src/domain/example/use-cases/get-one-example/getone-example.schema.ts"],"sourcesContent":["import mongoose from \"mongoose\";\nimport { type Example } from \"@/domain/example/example.schema\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// Define the example schema\nconst exampleSchema = new mongoose.Schema<Example>({\n  exampleId: { type: String, default: uuidv4() },\n  exampleName: { type: String, required: false },\n});\n\nexport const exampleModel = mongoose.model<Example>(\"example\", exampleSchema);\n","import { type Example } from \"@/domain/example/example.schema\";\nimport { exampleModel } from \"./models/example.model\";\n\nconst getExample = async () => {\n  const examples = await exampleModel.find();\n  return examples;\n};\n\nconst createExample = async (newExample: Omit<Example, \"_id\" | \"exampleId\">) =>\n  exampleModel.create(newExample);\n\nconst updateExample = async (\n  exampleId: string,\n  example: Omit<Example, \"_id\" | \"example_id\">,\n) => {\n  const updatedExample = await exampleModel\n    .findOneAndUpdate(\n      { exampleId },\n      {\n        $set: {\n          exampleName: example.exampleName,\n        },\n      },\n      { new: true },\n    )\n    .lean();\n\n  return updatedExample;\n};\n\nconst deleteExample = async (exampleId: string) => {\n  const example = await exampleModel\n    .deleteOne({\n      exampleId,\n    })\n    .lean();\n\n  return example;\n};\n\nconst getOneExample = async (exampleId: string) => {\n  const example = await exampleModel.findOne({\n    exampleId,\n  });\n\n  return example;\n};\n\nexport {\n  getExample,\n  createExample,\n  updateExample,\n  deleteExample,\n  getOneExample,\n};\n","import { getOneExample } from \"@/data-access/example.repo\";\n\nconst getOneExampleUseCase = async (exampleId: string) => {\n  const data = await getOneExample(exampleId);\n  return data;\n};\n\nexport default getOneExampleUseCase;\n","import { Type } from \"@sinclair/typebox\";\nimport { type FastifySchema } from \"fastify\";\n\nconst paramSchema = Type.Object({\n  exampleId: Type.String(),\n});\n\nexport const getOneExampleSchema = {\n  summary: \"Get one example schema\",\n  description: \"Get one example schema\",\n  tags: [\"Example\"],\n  params: paramSchema,\n  security: [{}],\n} satisfies FastifySchema;\n"],"mappings":";AAAA,OAAO,cAAc;AAErB,SAAS,MAAM,cAAc;AAG7B,IAAM,gBAAgB,IAAI,SAAS,OAAgB;AAAA,EACjD,WAAW,EAAE,MAAM,QAAQ,SAAS,OAAO,EAAE;AAAA,EAC7C,aAAa,EAAE,MAAM,QAAQ,UAAU,MAAM;AAC/C,CAAC;AAEM,IAAM,eAAe,SAAS,MAAe,WAAW,aAAa;;;AC8B5E,IAAM,gBAAgB,OAAO,cAAsB;AACjD,QAAM,UAAU,MAAM,aAAa,QAAQ;AAAA,IACzC;AAAA,EACF,CAAC;AAED,SAAO;AACT;;;AC5CA,IAAM,uBAAuB,OAAO,cAAsB;AACxD,QAAM,OAAO,MAAM,cAAc,SAAS;AAC1C,SAAO;AACT;AAEA,IAAO,iCAAQ;;;ACPf,SAAS,YAAY;AAGrB,IAAM,cAAc,KAAK,OAAO;AAAA,EAC9B,WAAW,KAAK,OAAO;AACzB,CAAC;AAEM,IAAM,sBAAsB;AAAA,EACjC,SAAS;AAAA,EACT,aAAa;AAAA,EACb,MAAM,CAAC,SAAS;AAAA,EAChB,QAAQ;AAAA,EACR,UAAU,CAAC,CAAC,CAAC;AACf;","names":[]}