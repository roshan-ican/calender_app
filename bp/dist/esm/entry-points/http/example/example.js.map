{"version":3,"sources":["../../../../../src/data-access/models/example.model.ts","../../../../../src/data-access/example.repo.ts","../../../../../src/domain/example/use-cases/get-example/get-example.usecase.ts","../../../../../src/domain/example/use-cases/get-example/get-example.schema.ts","../../../../../src/lib/logger/pino.logger.ts","../../../../../src/lib/logger/index.ts","../../../../../src/lib/error-handeling/index.ts","../../../../../src/domain/example/use-cases/create-example/create-example.usecase.ts","../../../../../src/domain/example/use-cases/create-example/create-example.schema.ts","../../../../../src/domain/example/example.schema.ts","../../../../../src/domain/example/use-cases/update-example/update-example.usecase.ts","../../../../../src/domain/example/use-cases/update-example/update-example.schema.ts","../../../../../src/domain/example/use-cases/delete-example/delete-example.usecase.ts","../../../../../src/domain/example/use-cases/delete-example/delete-example.schema.ts","../../../../../src/domain/example/use-cases/get-one-example/getone-example.usecase.ts","../../../../../src/domain/example/use-cases/get-one-example/getone-example.schema.ts","../../../../../src/entry-points/http/example/example.ts"],"sourcesContent":["import mongoose from \"mongoose\";\nimport { type Example } from \"@/domain/example/example.schema\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// Define the example schema\nconst exampleSchema = new mongoose.Schema<Example>({\n  exampleId: { type: String, default: uuidv4() },\n  exampleName: { type: String, required: false },\n});\n\nexport const exampleModel = mongoose.model<Example>(\"example\", exampleSchema);\n","import { type Example } from \"@/domain/example/example.schema\";\nimport { exampleModel } from \"./models/example.model\";\n\nconst getExample = async () => {\n  const examples = await exampleModel.find();\n  return examples;\n};\n\nconst createExample = async (newExample: Omit<Example, \"_id\" | \"exampleId\">) =>\n  exampleModel.create(newExample);\n\nconst updateExample = async (\n  exampleId: string,\n  example: Omit<Example, \"_id\" | \"example_id\">,\n) => {\n  const updatedExample = await exampleModel\n    .findOneAndUpdate(\n      { exampleId },\n      {\n        $set: {\n          exampleName: example.exampleName,\n        },\n      },\n      { new: true },\n    )\n    .lean();\n\n  return updatedExample;\n};\n\nconst deleteExample = async (exampleId: string) => {\n  const example = await exampleModel\n    .deleteOne({\n      exampleId,\n    })\n    .lean();\n\n  return example;\n};\n\nconst getOneExample = async (exampleId: string) => {\n  const example = await exampleModel.findOne({\n    exampleId,\n  });\n\n  return example;\n};\n\nexport {\n  getExample,\n  createExample,\n  updateExample,\n  deleteExample,\n  getOneExample,\n};\n","import { getExample } from \"@/data-access/example.repo\"\n\nconst getExampleUseCase = async() => {\n  const getAllExample = await getExample()\n  return getAllExample\n}\n\nexport default getExampleUseCase\n","import { type FastifySchema } from \"fastify\";\n\nexport const getExampleSchema: FastifySchema = {\n  summary: \"Get all products\",\n  tags: [\"Example\"],\n  security: [{}],\n  response: {},\n} satisfies FastifySchema;\n","import {\n  pino,\n  type Logger as PinoLoggerImpl,\n  type DestinationStream,\n} from \"pino\";\nimport { type LOG_LEVELS, type Logger } from \"./definition\";\n\nexport default class PinoLogger implements Logger {\n  readonly #logger: PinoLoggerImpl;\n\n  constructor(\n    private readonly level: LOG_LEVELS,\n    private readonly prettyPrintEnabled: boolean,\n    private readonly destStream?: DestinationStream | string,\n  ) {\n    this.#logger = pino({\n      level,\n      transport: prettyPrintEnabled\n        ? {\n            target: \"pino-pretty\",\n            options: {\n              colorize: true,\n              sync: true,\n            },\n          }\n        : undefined,\n    });\n  }\n\n  debug(message: string, metadata?: Record<string, unknown>): void {\n    if (metadata) {\n      this.#logger.debug(metadata, message);\n    } else {\n      this.#logger.debug(message);\n    }\n  }\n\n  error(message: string, metadata?: Record<string, unknown>): void {\n    if (metadata) {\n      this.#logger.error(metadata, message);\n    } else {\n      this.#logger.error(message);\n    }\n  }\n\n  info(message: string, metadata?: Record<string, unknown>): void {\n    if (metadata) {\n      this.#logger.info(metadata, message);\n    } else {\n      this.#logger.info(message);\n    }\n  }\n\n  warning(message: string, metadata?: Record<string, unknown>): void {\n    if (metadata) {\n      this.#logger.warn(metadata, message);\n    } else {\n      this.#logger.warn(message);\n    }\n  }\n}\n","import { type Logger, type LoggerConfiguration } from \"./definition\";\nimport PinoLogger from \"./pino.logger\";\nimport { metricsExporter } from \"../error-handeling\";\n\nexport class LoggerWrapper implements Logger {\n  // @ts-expect-error description: 'abcd'\n  #underlyingLogger: Logger | undefined = null;\n\n  configureLogger(\n    configuration: Partial<LoggerConfiguration>,\n    overrideIfExists = true,\n  ): void {\n    if (this.#underlyingLogger === null || overrideIfExists) {\n      this.#underlyingLogger = new PinoLogger(\n        configuration.level ?? \"info\",\n        configuration.prettyPrint ?? false,\n      );\n    }\n  }\n\n  resetLogger() {\n    // @ts-expect-error description: 'abcd'\n    this.#underlyingLogger = null;\n  }\n\n  debug(message: string, metadata?: Record<string, unknown>): void {\n    this.#getInitializeLogger().debug(message);\n  }\n\n  error(message: string, metadata?: Record<string, unknown>): void {\n    this.#getInitializeLogger().error(message);\n  }\n\n  info(message: string, metadata?: Record<string, unknown>): void {\n    // If never initialized, the set default configuration\n    this.#getInitializeLogger().info(message);\n  }\n\n  warning(message: string, metadata?: Record<string, unknown>): void {\n    this.#getInitializeLogger().warning(message);\n  }\n\n  #getInitializeLogger(): Logger {\n    this.configureLogger({ prettyPrint: true }, false);\n\n    return this.#underlyingLogger!;\n  }\n}\n\nexport const logger = new LoggerWrapper();\n","import type * as Http from \"http\";\nimport * as util from \"util\";\nimport { logger } from \"../logger\";\n\nlet httpServerRef: Http.Server;\n\nconst errorHandler = {\n  // Listen to the global process-level error events\n  listenToErrorEvents(httpServer: Http.Server) {\n    httpServerRef = httpServer;\n    process.on(\"uncaughtException\", async (error) => {\n      await errorHandler.handleError(error);\n    });\n\n    process.on(\"unhandledRejection\", async (reason) => {\n      await errorHandler.handleError(reason);\n    });\n\n    process.on(\"SIGTERM\", async () => {\n      logger.error(\n        \"App received SIGTERM event, try to gracefully close the server\",\n      );\n      await terminateHttpServerAndExit();\n    });\n\n    process.on(\"SIGINT\", async () => {\n      logger.error(\n        \"App received SIGINT event, try to gracefully close the server\",\n      );\n      await terminateHttpServerAndExit();\n    });\n  },\n\n  async handleError(errorToHandle: unknown) {\n    try {\n      const appError: AppError = normalizeError(errorToHandle);\n      logger.error(`AppError: ${appError.message}`);\n      await metricsExporter.fireMetric(\"error\", { errorName: appError.name }); // fire any custom metric when handling error\n      // A common best practice is to crash when an unknown error (non-trusted) is being thrown\n      if (!appError.isTrusted) {\n        await terminateHttpServerAndExit();\n      }\n    } catch (handlingError: unknown) {\n      // Not using the logger here because it might have failed\n      process.stdout.write(\n        \"The error handler failed, here are the handler failure and then the origin error that it tried to handle\",\n      );\n      process.stdout.write(JSON.stringify(handlingError));\n      process.stdout.write(JSON.stringify(errorToHandle));\n    }\n  },\n};\n\nconst terminateHttpServerAndExit = async () => {\n  // maybe implement more complex logic here (like using 'http-terminator' library)\n  if (httpServerRef) {\n    httpServerRef.close();\n  }\n\n  process.exit();\n};\n\n// The input might won't be 'AppError' or even 'Error' instance, the output of this function will be - AppError.\nconst normalizeError = (errorToHandle: unknown): AppError => {\n  if (errorToHandle instanceof AppError) {\n    return errorToHandle;\n  }\n\n  if (errorToHandle instanceof Error) {\n    const appError = new AppError(errorToHandle.name, errorToHandle.message);\n    appError.stack = errorToHandle.stack;\n    return appError;\n  }\n\n  // meaning it could be any type,\n  const inputType = typeof errorToHandle;\n  return new AppError(\n    \"general-error\",\n    `Error Handler received a none error instance with type - ${inputType}, value - ${util.inspect(\n      errorToHandle,\n    )}`,\n  );\n};\n\ntype ERR_CODES = \"VAL_ERR\" | \"ERR_GENERAL\";\n\nclass AppError extends Error {\n  constructor(\n    public name: string,\n    public message: string,\n    public HTTPStatus = 500,\n    public isTrusted = true,\n    public code: ERR_CODES = \"ERR_GENERAL\",\n    public cause?: unknown,\n  ) {\n    super(message);\n  }\n}\n\n// This simulates a typical monitoring solution that allow firing custom metrics when\n// like Prometheus, DataDog, CloudWatch, etc\nconst metricsExporter = {\n  async fireMetric(name: string, labels: Record<string, unknown>) {\n    // TODO: use logger instead of conso.log\n\n    console.log(\"In real production code I will really fire metrics\", {\n      name,\n      labels,\n    });\n  },\n};\n\nexport {\n  errorHandler,\n  metricsExporter,\n  AppError,\n  normalizeError,\n  terminateHttpServerAndExit,\n};\n","import { createExample } from \"@/data-access/example.repo\";\nimport { type createExampleRequestDTO } from \"./create-example.schema\";\nimport { AppError } from \"@/lib/error-handeling\";\n\nconst createExampleUseCase = async (newExample: createExampleRequestDTO) => {\n  const newExampleCreated = \"created\";\n\n  if (!newExampleCreated) {\n    throw new Error(\"Error creating example\");\n  }\n\n  throw new AppError(\"Error creating example\", \"Error creating example\", 500);\n  // const newExampleCreated = await createExample(newExample);\n\n  // if (!newExampleCreated) {\n  //   throw new Error(\"Error creating example\");\n  // }\n\n  // return newExampleCreated;\n};\n\nexport default createExampleUseCase;\n","import { type FastifySchema } from \"fastify\";\nimport { type Static, Type } from \"@sinclair/typebox\";\n\nimport { ExampleSchema } from \"@/domain/example/example.schema\";\n\nexport const createExampleRequest = Type.Omit(ExampleSchema, [\n  \"_id\",\n  \"exampleId\",\n]);\n\nexport type createExampleRequestDTO = Static<typeof createExampleRequest>;\n\nexport const createExampleSchema = {\n  summary: \"Create example schema\",\n  tags: [\"Example\"],\n  description: \"Create example schema\",\n  security: [{}],\n  body: createExampleRequest,\n  response: {\n    200: ExampleSchema,\n  },\n} satisfies FastifySchema;\n","import { type Static, Type } from \"@sinclair/typebox\";\n\nexport const ExampleSchema = Type.Object({\n  exampleId: Type.String(),\n  exampleName: Type.String(),\n  _id: Type.Optional(Type.String()),\n});\n\nexport type Example = Static<typeof ExampleSchema>;\n","import { updateExample } from \"@/data-access/example.repo\";\nimport { type UpdateExampleDTO } from \"./update-example.schema\";\n\nconst updateExampleUseCase = async (\n  exampleId: string,\n  example: UpdateExampleDTO,\n) => {\n  const updatedExample = await updateExample(exampleId, example);\n  return updatedExample;\n};\n\nexport default updateExampleUseCase;\n","import { type FastifySchema } from \"fastify\";\nimport { ExampleSchema } from \"@/domain/example/example.schema\";\nimport { type Static, Type } from \"@sinclair/typebox\";\n\nconst paramSchema = Type.Object({\n  exampleId: Type.String(),\n});\n\nconst bodySchema = Type.Partial(Type.Omit(ExampleSchema, [\"_id\", \"exampleId\"]));\n\nexport type UpdateExampleDTO = Static<typeof bodySchema>;\n\nexport const updateExampleSchema = {\n  summary: \"Update example schema\",\n  tags: [\"Example\"],\n  description: \"Update example schema\",\n  security: [{}],\n  body: bodySchema,\n  params: paramSchema,\n  response: {\n    200: ExampleSchema,\n  },\n} satisfies FastifySchema;\n","import { deleteExample } from \"@/data-access/example.repo\";\n\nconst deleteExampleUseCase = async (exampleId: string) => {\n  const data = await deleteExample(exampleId);\n  return data;\n};\n\nexport default deleteExampleUseCase;\n","import { Type } from \"@sinclair/typebox\";\nimport { type FastifySchema } from \"fastify\";\n// import { ExampleSchema } from \"@/domain/example/example.schema\";\n\nexport const ParamSchema = Type.Object({\n  exampleId: Type.String(),\n});\n\nexport const deleteExampleSchema = {\n  summary: \"Delete example schema\",\n  tags: [\"Example\"],\n  security: [{}],\n  params: ParamSchema,\n  // response: {\n  //   200: ExampleSchema,\n  // },\n} satisfies FastifySchema;\n","import { getOneExample } from \"@/data-access/example.repo\";\n\nconst getOneExampleUseCase = async (exampleId: string) => {\n  const data = await getOneExample(exampleId);\n  return data;\n};\n\nexport default getOneExampleUseCase;\n","import { Type } from \"@sinclair/typebox\";\nimport { type FastifySchema } from \"fastify\";\n\nconst paramSchema = Type.Object({\n  exampleId: Type.String(),\n});\n\nexport const getOneExampleSchema = {\n  summary: \"Get one example schema\",\n  description: \"Get one example schema\",\n  tags: [\"Example\"],\n  params: paramSchema,\n  security: [{}],\n} satisfies FastifySchema;\n","import type {\n  FastifyPluginAsyncTypebox,\n  TypeBoxTypeProvider,\n} from \"@fastify/type-provider-typebox\";\n\nimport getExample from \"@/domain/example/use-cases/get-example\";\nimport { getExampleSchema } from \"@/domain/example/use-cases/get-example\";\n\nimport createExample from \"@/domain/example/use-cases/create-example\";\nimport { createExampleSchema } from \"@/domain/example/use-cases/create-example\";\n\nimport updateExample from \"@/domain/example/use-cases/update-example\";\nimport { updateExampleSchema } from \"@/domain/example/use-cases/update-example\";\n\nimport deleteExample from \"@/domain/example/use-cases/delete-example\";\nimport { deleteExampleSchema } from \"@/domain/example/use-cases/delete-example\";\n\nimport getOneExample from \"@/domain/example/use-cases/get-one-example\";\nimport { getOneExampleSchema } from \"@/domain/example/use-cases/get-one-example\";\n\nconst example: FastifyPluginAsyncTypebox = async (\n  fastify,\n  opts,\n): Promise<void> => {\n  fastify\n    .withTypeProvider<TypeBoxTypeProvider>()\n\n    .get(\"/\", { schema: getExampleSchema }, async () => {\n      const getAllexample = await getExample();\n      return getAllexample;\n    })\n\n    .post(\"/\", { schema: createExampleSchema }, async (request, reply) => {\n      const example = await createExample(request.body);\n      return example;\n    })\n\n    .put(\n      \"/:exampleId\",\n      { schema: updateExampleSchema },\n      async (request, reply) => {\n        const { exampleId } = request.params;\n        const exampleBody = request.body;\n\n        const updatedExample = await updateExample(exampleId, exampleBody);\n\n        if (updatedExample) {\n          await reply.code(200).send(updatedExample);\n        }\n      },\n    )\n\n    .delete(\n      \"/:exampleId\",\n      { schema: deleteExampleSchema },\n      async (request, reply) => {\n        const { exampleId } = request.params;\n        const example = await deleteExample(exampleId);\n\n        await reply.code(200).send(example);\n      },\n    )\n\n    .get(\n      \"/:exampleId\",\n      { schema: getOneExampleSchema },\n      async (request, reply) => {\n        const { exampleId } = request.params;\n        const example = await getOneExample(exampleId);\n        return example;\n      },\n    );\n};\n\nexport default example;\n"],"mappings":"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","names":["example","Type","Type","example","Type","Type","Type","paramSchema","example"]}