{"version":3,"sources":["../../../../../src/domain/example/use-cases/update-example/index.ts","../../../../../src/data-access/models/example.model.ts","../../../../../src/data-access/example.repo.ts","../../../../../src/domain/example/use-cases/update-example/update-example.usecase.ts","../../../../../src/domain/example/example.schema.ts","../../../../../src/domain/example/use-cases/update-example/update-example.schema.ts"],"sourcesContent":["export { default } from \"./update-example.usecase\";\nexport * from \"./update-example.schema\";\n","import mongoose from \"mongoose\";\nimport { type Example } from \"@/domain/example/example.schema\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// Define the example schema\nconst exampleSchema = new mongoose.Schema<Example>({\n  exampleId: { type: String, default: uuidv4() },\n  exampleName: { type: String, required: false },\n});\n\nexport const exampleModel = mongoose.model<Example>(\"example\", exampleSchema);\n","import { type Example } from \"@/domain/example/example.schema\";\nimport { exampleModel } from \"./models/example.model\";\n\nconst getExample = async () => {\n  const examples = await exampleModel.find();\n  return examples;\n};\n\nconst createExample = async (newExample: Omit<Example, \"_id\" | \"exampleId\">) =>\n  exampleModel.create(newExample);\n\nconst updateExample = async (\n  exampleId: string,\n  example: Omit<Example, \"_id\" | \"example_id\">,\n) => {\n  const updatedExample = await exampleModel\n    .findOneAndUpdate(\n      { exampleId },\n      {\n        $set: {\n          exampleName: example.exampleName,\n        },\n      },\n      { new: true },\n    )\n    .lean();\n\n  return updatedExample;\n};\n\nconst deleteExample = async (exampleId: string) => {\n  const example = await exampleModel\n    .deleteOne({\n      exampleId,\n    })\n    .lean();\n\n  return example;\n};\n\nconst getOneExample = async (exampleId: string) => {\n  const example = await exampleModel.findOne({\n    exampleId,\n  });\n\n  return example;\n};\n\nexport {\n  getExample,\n  createExample,\n  updateExample,\n  deleteExample,\n  getOneExample,\n};\n","import { updateExample } from \"@/data-access/example.repo\";\nimport { type UpdateExampleDTO } from \"./update-example.schema\";\n\nconst updateExampleUseCase = async (\n  exampleId: string,\n  example: UpdateExampleDTO,\n) => {\n  const updatedExample = await updateExample(exampleId, example);\n  return updatedExample;\n};\n\nexport default updateExampleUseCase;\n","import { type Static, Type } from \"@sinclair/typebox\";\n\nexport const ExampleSchema = Type.Object({\n  exampleId: Type.String(),\n  exampleName: Type.String(),\n  _id: Type.Optional(Type.String()),\n});\n\nexport type Example = Static<typeof ExampleSchema>;\n","import { type FastifySchema } from \"fastify\";\nimport { ExampleSchema } from \"@/domain/example/example.schema\";\nimport { type Static, Type } from \"@sinclair/typebox\";\n\nconst paramSchema = Type.Object({\n  exampleId: Type.String(),\n});\n\nconst bodySchema = Type.Partial(Type.Omit(ExampleSchema, [\"_id\", \"exampleId\"]));\n\nexport type UpdateExampleDTO = Static<typeof bodySchema>;\n\nexport const updateExampleSchema = {\n  summary: \"Update example schema\",\n  tags: [\"Example\"],\n  description: \"Update example schema\",\n  security: [{}],\n  body: bodySchema,\n  params: paramSchema,\n  response: {\n    200: ExampleSchema,\n  },\n} satisfies FastifySchema;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,sBAAqB;AAErB,kBAA6B;AAG7B,IAAM,gBAAgB,IAAI,gBAAAA,QAAS,OAAgB;AAAA,EACjD,WAAW,EAAE,MAAM,QAAQ,aAAS,YAAAC,IAAO,EAAE;AAAA,EAC7C,aAAa,EAAE,MAAM,QAAQ,UAAU,MAAM;AAC/C,CAAC;AAEM,IAAM,eAAe,gBAAAD,QAAS,MAAe,WAAW,aAAa;;;ACC5E,IAAM,gBAAgB,OACpB,WACA,YACG;AACH,QAAM,iBAAiB,MAAM,aAC1B;AAAA,IACC,EAAE,UAAU;AAAA,IACZ;AAAA,MACE,MAAM;AAAA,QACJ,aAAa,QAAQ;AAAA,MACvB;AAAA,IACF;AAAA,IACA,EAAE,KAAK,KAAK;AAAA,EACd,EACC,KAAK;AAER,SAAO;AACT;;;ACzBA,IAAM,uBAAuB,OAC3B,WACA,YACG;AACH,QAAM,iBAAiB,MAAM,cAAc,WAAW,OAAO;AAC7D,SAAO;AACT;AAEA,IAAO,iCAAQ;;;ACXf,qBAAkC;AAE3B,IAAM,gBAAgB,oBAAK,OAAO;AAAA,EACvC,WAAW,oBAAK,OAAO;AAAA,EACvB,aAAa,oBAAK,OAAO;AAAA,EACzB,KAAK,oBAAK,SAAS,oBAAK,OAAO,CAAC;AAClC,CAAC;;;ACJD,IAAAE,kBAAkC;AAElC,IAAM,cAAc,qBAAK,OAAO;AAAA,EAC9B,WAAW,qBAAK,OAAO;AACzB,CAAC;AAED,IAAM,aAAa,qBAAK,QAAQ,qBAAK,KAAK,eAAe,CAAC,OAAO,WAAW,CAAC,CAAC;AAIvE,IAAM,sBAAsB;AAAA,EACjC,SAAS;AAAA,EACT,MAAM,CAAC,SAAS;AAAA,EAChB,aAAa;AAAA,EACb,UAAU,CAAC,CAAC,CAAC;AAAA,EACb,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,UAAU;AAAA,IACR,KAAK;AAAA,EACP;AACF;","names":["mongoose","uuidv4","import_typebox"]}